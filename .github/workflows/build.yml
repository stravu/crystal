name: Build Crystal

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        # Build both platforms for validation, but use different commands for speed
        os: [macos-latest, ubuntu-latest]
        include:
          - os: macos-latest
            build_cmd: build:mac:ci
            artifact_name: crystal-macos
            artifact_path: dist-electron/*.dmg
          - os: ubuntu-latest
            build_cmd: build:linux:ci
            artifact_name: crystal-linux
            artifact_path: |
              dist-electron/*.deb
              dist-electron/*.AppImage
    
    runs-on: ${{ matrix.os }}
    
    permissions:
      contents: read  # Required for accessing repository contents

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.15.1'
        cache: 'pnpm'

    # Cache native modules and electron binaries to speed up rebuilds
    - name: Cache native modules
      uses: actions/cache@v4
      with:
        path: |
          main/node_modules/.bin
          main/build
          ~/.electron
          ~/.electron-gyp
        key: ${{ runner.os }}-native-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-native-modules-

    - name: Cache Electron binaries
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/electron
          ~/.cache/electron-builder
          ~/AppData/Local/electron/Cache
          ~/AppData/Local/electron-builder/Cache
        key: ${{ runner.os }}-electron-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-electron-

    # Cache built frontend and main process to avoid rebuilds
    - name: Cache built components
      uses: actions/cache@v4
      with:
        path: |
          frontend/dist
          main/dist
        key: ${{ runner.os }}-build-${{ hashFiles('frontend/**', 'main/**', '**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install dependencies
      run: pnpm install

    # Build frontend and main process in parallel for faster builds (skip if cached)
    - name: Build frontend and main process
      run: |
        # Check if builds exist from cache
        if [ ! -d "frontend/dist" ] || [ ! -d "main/dist" ]; then
          echo "Building frontend and main process..."
          # Build both frontend and main process concurrently
          pnpm run build:frontend &
          pnpm run build:main &
          wait
        else
          echo "Using cached frontend and main builds"
        fi

    - name: Rebuild native modules (if needed)
      run: |
        # Only rebuild if native modules cache missed or build files changed
        if [ ! -f "main/node_modules/.bin/electron-rebuild" ] || [ ! -f "main/build/Release/better_sqlite3.node" ]; then
          echo "Rebuilding native modules..."
          pnpm run electron:rebuild
        else
          echo "Using cached native modules"
        fi

    - name: Generate NOTICES file
      run: pnpm run generate-notices

    - name: Build application
      run: pnpm run ${{ matrix.build_cmd }}
      env:
        # GitHub token (required by electron-builder even for non-publish builds)
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # macOS code signing (optional for CI builds)
        CSC_LINK: ${{ matrix.os == 'macos-latest' && secrets.APPLE_CERTIFICATE || '' }}
        CSC_KEY_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_CERTIFICATE_PASSWORD || '' }}
        # macOS notarization (optional for CI builds)
        APPLE_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_ID || '' }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_APP_PASSWORD || '' }}
        APPLE_TEAM_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_TEAM_ID || '' }}
        # Only enable signing when certificates are available
        CSC_IDENTITY_AUTO_DISCOVERY: ${{ matrix.os == 'macos-latest' && 'true' || 'false' }}

    - name: List build artifacts
      run: ls -la dist-electron/

    # Skip Flatpak build for CI speed - saves 4+ minutes
    # Flatpak is built separately in release workflow
    - name: Skip Flatpak build (CI optimization)
      if: matrix.os == 'ubuntu-latest'
      run: echo "Skipping Flatpak build for faster CI - will be built in release workflow"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_path }}
        if-no-files-found: error
        retention-days: 7

