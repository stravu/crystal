name: Release Crystal

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        type: string

jobs:
  release:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.15.1'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install

    - name: Build main process
      run: pnpm run build:main

    - name: Rebuild native modules
      run: pnpm run electron:rebuild

    - name: Build and publish application
      run: pnpm run release:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # macOS code signing
        CSC_LINK: ${{ secrets.APPLE_CERTIFICATE }}
        CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        # macOS notarization
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        # Only enable signing when certificates are available
        CSC_IDENTITY_AUTO_DISCOVERY: 'true'

    - name: Ad-hoc sign macOS app
      if: '!secrets.APPLE_CERTIFICATE'
      run: |
        # Find the built .app
        APP_PATH=$(find dist-electron -name "*.app" -type d | head -1)
        if [ -n "$APP_PATH" ]; then
          echo "Ad-hoc signing $APP_PATH"
          codesign --force --deep --sign - "$APP_PATH"
          echo "Removing quarantine attribute"
          xattr -cr "$APP_PATH"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: crystal-macos
        path: dist-electron/*.dmg
        if-no-files-found: error
        retention-days: 7

  create-release:
    needs: release
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || github.event.inputs.tag
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from package.json
      id: version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        release_name: Crystal ${{ steps.version.outputs.version }}
        body: |
          ## Crystal ${{ steps.version.outputs.version }}

          ### Installation

          **macOS**: Download the `.dmg` file and drag Crystal to your Applications folder.

          ### What's New
          - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details

          ### Requirements
          - Claude Code must be installed separately
          - Node.js 22+ (for development)
          - Git
        draft: true
        prerelease: false